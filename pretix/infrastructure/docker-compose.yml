#
# Title: Deployment Configuration for Docker Composed Swarm
#
# Authors: Filipe Pires (85122) and Jo√£o Alegria (85048)
#

version: '3.3'
services:
  pg-0:
    image: bitnami/postgresql-repmgr:11
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=adminpassword
      - POSTGRESQL_USERNAME=customuser
      - POSTGRESQL_PASSWORD=custompassword
      - POSTGRESQL_DATABASE=customdatabase
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
    volumes:
      - /nfs/pretix/postgres/master:/bitnami/postgresql:rw
    networks:
      - pretixPgNetwork
    logging:
      driver: json-file
    deploy:
      restart_policy:
        condition: on-failure

  pg-1:
    image: bitnami/postgresql-repmgr:11
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=adminpassword
      - POSTGRESQL_USERNAME=customuser
      - POSTGRESQL_PASSWORD=custompassword
      - POSTGRESQL_DATABASE=customdatabase
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
    volumes:
      - /nfs/pretix/postgres/slave1:/bitnami/postgresql:rw
    networks:
      - pretixPgNetwork
    logging:
      driver: json-file
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  # pg-2:
  #   image: bitnami/postgresql-repmgr:11
  #   environment:
  #     - POSTGRESQL_POSTGRES_PASSWORD=adminpassword
  #     - POSTGRESQL_USERNAME=customuser
  #     - POSTGRESQL_PASSWORD=custompassword
  #     - POSTGRESQL_DATABASE=customdatabase
  #     - REPMGR_PASSWORD=repmgrpassword
  #     - REPMGR_PRIMARY_HOST=pg-0
  #     - REPMGR_PARTNER_NODES=pg-0,pg-1,pg-2
  #     - REPMGR_NODE_NAME=pg-2
  #     - REPMGR_NODE_NETWORK_NAME=pg-2
  #   volumes:
  #     - /nfs/pretix/postgres/slave2:/bitnami/postgresql:rw
  #   networks:
  #     - pretixPgNetwork
  #   deploy:
  #     restart_policy:
  #       condition: on-failure

  pgpool:
    image: bitnami/pgpool:4
    ports:
      - 7232:5432
    environment:
      - PGPOOL_BACKEND_NODES=0:pg-0:5432,1:pg-1:5432,2:pg-2:5432
      - PGPOOL_SR_CHECK_USER=customuser
      - PGPOOL_SR_CHECK_PASSWORD=custompassword
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=postgres
      - PGPOOL_POSTGRES_PASSWORD=adminpassword
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pretixPgNetwork
    logging:
      driver: json-file
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  redisproxy:
    image: 10.2.0.1:5000/pretixhaproxy
    # build: ./haproxy
    ports:
      - 7279:6379
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=password
      - REDIS_HOSTS=redismaster, redisslave
    networks:
      - pretixRedisNetwork
    logging:
      driver: json-file
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  redismaster:
      image: redis:4.0.10-alpine
      volumes:
        - /nfs/pretix/redis/master:/data:rw
      logging:
        driver: json-file
      networks:
        - pretixRedisNetwork

  redisslave:
    image: 10.2.0.1:5000/pretixredisslave
    environment:
      - REDIS_MASTER=redismaster
    volumes:
      - /nfs/pretix/redis/slave:/data:rw
    networks:
      - pretixRedisNetwork
    logging:
      driver: json-file
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  redissentinel:
    image: 10.2.0.1:5000/pretixredissentinel
    # build: ./redisSentinel
    environment:
      - MASTER_NAME=mymaster
      - QUORUM=1
      - MASTER=redismaster
    volumes:
      - /nfs/pretix/redis/sentinel:/data:rw
    logging:
      driver: json-file
    networks:
      - pretixRedisNetwork
    deploy:
      restart_policy:
        condition: on-failure
        
  web:
    image: pretix/standalone:stable
    volumes:
      - /nfs/pretix/web/pretix:/etc/pretix:rw
      - /nfs/pretix/web/data:/data:rw
      - /nfs/pretix/wait-for-it.sh:/wait-for-it.sh
    ports:
      - 7201:80
    networks:
      - pretixOut
      - pretixPgNetwork
      - pretixRedisNetwork
    secrets:
      - source: pretixConf
        target: /etc/pretix/pretix.cfg
    logging:
      driver: json-file
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  nginx: 
    image: nginx:latest
    depends_on:
      - web
    secrets:
      - source: pretixNginxConf
        target: /etc/nginx/nginx.conf
    ports:
      - 7200:80
    #  - 443:443
    networks:
      - pretixOut
    logging:
      driver: json-file
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

secrets:
  pretixConf:
    file: ./pretix.cfg
  pretixNginxConf:
    file: ./nginx.conf

networks:
  pretixOut:
    driver: overlay
  pretixPgNetwork:
    driver: overlay
  pretixRedisNetwork:
    driver: overlay
